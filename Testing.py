#! /usr/bin/python3
import requests
from bs4 import BeautifulSoup
import json
import time

def issb_scraper():
	res = requests.get('https://www.issb-bd.org/calluplist').text
	soup = BeautifulSoup(res, 'lxml')

	contents = soup.find_all('div', class_ = 'col-md-12')

	#turn the html into simple text
	for content in contents:
		roll_string = (content.text)

	#convert the content from a whole string to each word into list
	def Convert(string):
	    li = list(string.split(","))
	    return li

	roll_list = (Convert(roll_string))

	# using list comprehension + startswith()
	# Prefix Separation to separate the 87th bma batch from others
	start_letter = ' 87'
	with_s = [x for x in roll_list if x.startswith(start_letter)]

	#remove the space in front of the strings in the list
	final_list=[]
	for i in with_s:
		final_list.append(i[1:])

	#remove a mistake of the editors
	final_list.pop(0)

	for i in range(0, len(final_list)):
		final_list[i] = int(final_list[i])

	#create the written passed candidate list
	
	new_list = [87010423, 87010644, 87010424, 87010425, 87010426, 87010427, 87010428, 87010429, 87010431, 87010432, 87010433, 87010434, 87010435, 87010436, 87010438, 87010440, 87010441, 87010442, 87010443, 87010444, 87010445, 87010446, 87010448, 87010449, 87010450, 87010451, 87010452, 87010453, 87010454, 87010455, 87010457, 87010458, 87010459, 87010460, 87010461, 87010462, 87010463, 87010464, 87010465, 87010466, 87010467, 87010468, 87010469, 87010470, 87010470, 87010472, 87010473, 87010474, 87010475, 87010476, 87010477, 87010478, 87010479, 87010480, 87010481, 87010483, 87010484, 87010485, 87010486, 87010487, 87010488, 87010489, 87010490, 87010491, 87010492, 87010493, 87010494, 87010495, 87010496, 87010497, 87010498, 87010499, 87010500, 87010501, 87010502, 87010503, 87010504, 87010505, 87010506, 87010507, 87010508, 87010509, 87010510, 87010511, 87010512, 87010513, 87010514, 87010515, 87010516, 87010517, 87010518, 87010519, 87010520, 87010521, 87010522, 87010523, 87010524, 87010525, 87010526, 87010527, 87010528, 87010529, 87010530, 87010531, 87010532, 87010533, 87010536, 87010537, 87010538, 87010540, 87010541, 87010542, 87010543, 87010544, 87010545, 87010546, 87010547, 87010550, 87010551, 87010553, 87010554, 87010555, 87010557, 87010558, 87010559, 87010560, 87010561, 87010562, 87010563, 87010564, 87010565, 87010566, 87010567, 87010568, 87010570, 87010571, 87010572, 87010573, 87010574, 87010575, 87010576, 87010577, 87010578, 87010579, 87010580, 87010581, 87010582, 87010583, 87010584, 87010585, 87010586, 87010587, 87010588, 87010589, 87010590, 87010591, 87010592, 87010593, 87010594, 87010595, 87010596, 87010597, 87010598, 87010599, 87010600, 87010601, 87010602, 87010603, 87010604, 87010605, 87010606, 87010607, 87010608, 87010609, 87010610, 87010611, 87010612, 87010613, 87010614, 87010615, 87010616, 87010617, 87010618, 87010619, 87010620, 87010621, 87010622, 87010623, 87010624, 87010625, 87010626, 87010627, 87010628, 87010629, 87010630, 87010632, 87010633, 87010634, 87010635, 87010636, 87010637, 87010638, 87010639, 87010640, 87010641, 87010642, 87010643, 87010645, 87010647, 87010648, 87010649, 87010650, 87010651, 87010652, 87010654, 87010655, 87010657, 87010658, 87010659, 87010660, 87010661, 87010662, 87010663, 87010664, 87010665, 87010666, 87010669, 87010670, 87010671, 87010673, 87010675, 87010676, 87010677, 87010678, 87010679, 87010680, 87010681, 87010682, 87010683, 87010685, 87010686, 87010687, 87010688, 87010689, 87010690, 87110691]

	old_list = [86170209, 86150234, 86170201, 86170169, 86170162, 86170140, 86170114, 86170077, 86170045, 86170038, 86170010, 86170004, 86030273, 86030270, 86030267, 86030259, 86030247, 86030224, 86030216, 86030351, 86030348, 86030342, 86030314, 86030307, 86030300, 86030297, 86030294, 86030291, 86030284, 86080258, 86080202, 86080192, 86080081, 86080044, 86080029, 86080007, 86040246, 86040254, 86040247, 86040242, 86040235, 86040231, 86040230, 86040225, 86040215, 86040210, 86040209, 86040316, 86040321, 86040191, 86040202, 86040197, 86150208, 86150006, 86040297, 86040266, 86190180, 86130093, 86040263, 86040358, 86150018, 86150197, 86150028, 86040256, 86140202, 86040205, 86150121, 86150176, 86150266, 86150095, 86150100, 86150059, 86150104, 86150204, 86040337, 86150050, 86040195, 86150002, 86040361, 86040317, 86150062, 86150115, 86150094, 86040207, 86150168, 86150060, 86040343, 86040194, 86040302, 86150080, 86090151, 86150164, 86150294, 86040143, 86150082, 86040155, 86100159, 86090210, 86030215, 86090067, 86070239, 86090303, 86170092, 86040094, 86150069, 86040283, 86030356, 86030186, 86040250, 86040269, 86150058, 86040248, 86170093, 86030091, 86070297, 86090284, 86080075, 86170157, 86100207, 86030131, 86030153, 86070262, 86150089, 86040089, 86150251, 86060280, 86060262, 86020061, 86060218, 86060293, 86100059, 86030012, 86090098, 86040190, 86070152, 86060321, 86080125, 86100203, 86040272, 86040295, 86030340, 86070250, 86030008, 86040294, 86090134, 86060336, 86020147, 86060335, 86030081, 86070279, 86020008, 86070154, 86030020, 86100099, 86070260, 86090113, 86100315, 86090239, 86020130, 86030167, 86090003, 86030112, 86070244, 86090074, 86100158, 86070243, 86090159, 86090071, 86060298, 86030126, 86030076, 86030128, 86070270, 86030206, 86090007, 86090280, 86070241, 86170303, 86070238, 86090252, 86070252, 86090095, 86070240, 86090155, 86060322, 86060327, 86100108, 86100009, 86100109, 86030031, 86070269, 86090123, 86030111, 86060352, 86060206, 86150161, 86070340, 86150249, 86070232, 86070248, 86100017, 86070247, 86100005, 86150079, 86040327, 86090017, 86090032, 86150068, 86150013, 86100134, 86100251, 86100129, 86090009, 86070255, 86100354, 86070281, 86070156, 86040278, 86150154, 86040258, 86150264, 86070166, 86070158, 86040342, 86100250, 86070234, 86150020, 86100125, 86150191, 86150148, 86150039, 86150135, 86100162, 86100154, 86070157, 86070164, 86070161, 86150146, 86070260, 86090104, 86040173, 86030145, 8626003, 86040234, 86100330, 86110053]

	Board = [[0],[86020008, 86020130, 86020061, 86020147],[86030126, 86030216, 86030273, 86030008, 86030128, 86030012, 86030131, 86030224, 86030284, 86030167, 86030247, 86030291, 86030020, 86030145, 86030259, 86030031, 86030111, 86030294, 86030076, 86030112, 86030153, 86030186, 86030267, 86030297, 86030081, 86030206, 86030300, 86030091, 86030215, 86030270, 86030307, 86030314, 86030340, 86030348, 86030342, 86030351, 86030356],[86040089, 86040094, 86040191, 86040246, 86040272, 86040194, 86040247, 86040195, 86040215, 86040248, 86040197, 86040225, 86040250, 86040278, 86040230, 86040254, 86040173, 86040202, 86040231, 86040256, 86040205, 86040234, 86040258, 86040283, 86040155, 86040207, 86040235, 86040263, 86040209, 86040266, 86040294, 86040143, 86040190, 86040210, 86040242, 86040269, 86040295, 86040297, 86040321, 86040337, 86040343, 86040358, 86040302, 86040316, 86040327, 86040342, 86040361, 86040317],[0],[86060206, 86060218, 86060293, 86060298, 86060262, 86060280, 86060321, 86060336, 86060352, 86060322, 86060327, 86060335],[86070156, 86070157, 86070232, 86070247, 86070158, 86070234, 86070248, 86070161, 86070250, 86070164, 86070238, 86070252, 86070166, 86070239, 86070255, 86070240, 86070260, 86070260, 86070241, 86070262, 86070152, 86070243, 86070269, 86070154, 86070244, 86070270, 86070279, 86070340, 86070281, 86070297],[86080007, 86080075, 86080192, 86080258, 86080029, 86080125, 86080202, 86080044, 86080081],[86090003, 86090071, 86090104, 86090007, 86090074, 86090210, 86090284, 86090009, 86090113, 86090303, 86090017, 86090123, 86090151, 86090095, 86090239, 86170303, 86090032, 86090098, 86090155, 86090252, 86090067, 86090134, 86090159, 86090280],[86100005, 86100099, 86100154, 86100203, 86100009, 86100108, 86100158, 86100207, 86100017, 86100109, 86100159, 86100250, 86100354, 86100125, 86100162, 86100251, 86100129, 86100315, 86100059, 86100134, 86100330],[86110053],[0],[86130093],[86140202],[86150002, 86150079, 86150115, 86150154, 86150204, 86150266, 86150006, 86150080, 86150121, 86150161, 86150050, 86150082, 86150164, 86150208, 86150294, 86150058, 86150168, 86150013, 86150059, 86150089, 86150135, 86150234, 86150018, 86150060, 86150094, 86150176, 86150020, 86150062, 86150095, 86150249, 86150100, 86150146, 86150191, 86150251, 86150028, 86150068, 86150104, 86150148, 86150197, 86150264, 86150039, 86150069],[0],[86170004, 86170093, 86170140, 86170201, 86170157, 86170209, 86170010, 86170114, 86170162, 86170038, 86170077, 86170169, 86170045, 86170092],[86190180]]

	i = 0
	j = 0

	x = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
	f = [0, 4, 37, 50, 0, 12, 32, 9, 24, 21, 1, 0, 1, 1, 42, 0, 14, 1]
	y = []
	z = []

	for k in new_list:
		for l in final_list:
			if k == l:
				y.append(new_list.index(k))

	for t in y:
		z.append(old_list[t])

	for m in range(18):
		if Board[m][0] == 0:
			x[m] = 0
		else:
			while i<len(Board[m]):
				while j<len(z):
					if z[j] == Board[m][i]:
						x[m] += 1
					j = j + 1
				j = 0
				i = i + 1
			i = 0

	total_written_passed = new_list
	not_shifted_issb = len(final_list) - len(z)


	with open('rollnos.json', 'r') as j:
	    json_data = json.load(j)


	last_update = list(set(final_list) - set(json_data))

	mess = (list(set(total_written_passed).intersection(set(last_update))))

	if len(last_update) > 0:
		from twilio.rest import Client
		account_sid = 'AC9b72bc6a1537099e31db48f8eb286f03' 
		auth_token = '2a0535ceaf0ff708647fad8f1d57379d' 
		client = Client(account_sid, auth_token) 
	 

		message = client.messages.create(  
		                              messaging_service_sid='MGa9ce408c8047c9f3f6fccc87d794e2f0', 
		                              body= f'The website added {len(last_update)} new candidates of them {len(mess)} are from shifted list. {21-x[9]} candidates are still left from your board.',
		                              to='+8801772488663' 
		                          ) 
	 
		#print(message.sid)
		json_data = json_data + last_update
		with open('rollnos.json', 'w') as file:
			json.dump(json_data, file)
	else:
		pass


if __name__ == '__main__':
	while True:
		issb_scraper()
		print('Waiting 3 Hour')
		time.sleep(3*3600)
